//
//  ViewController.swift
//  TodoApp
//
//  Created by Jack Lee on 2023/08/02.
//

import UIKit
import CoreData

//MARK: - ÏöîÏ≤≠ÏÇ¨Ìï≠ Ï†ïÎ¶¨
/*
 ÌïÑÏàò Íµ¨ÌòÑ
 „Ñ¥ userdefaultÎ°ú Îç∞Ïù¥ÌÑ∞ Ïú†ÏßÄ - CRUD (ÏßÄÍ∏àÏùÄ Î¨¥ÏóáÏù¥ Í∞ÄÎä•ÌïúÍ∞Ä? > üî•create, üî•read, update, üî•delete > Ï†úÎåÄÎ°ú ÎêòÎäîÍ±¥ create, readÏù∏Í±∞ Í∞ôÏùÄÎç∞?
 „Ñ¥ ‚≠êÔ∏è tableView section/ header / footerÎ°ú Íµ¨Î∂Ñ - Ïπ¥ÌÖåÍ≥†Î¶¨Î≥ÑÎ°ú Íµ¨Î∂Ñ ÏßìÍ∏∞ >> inset groupÏúºÎ°ú Ï†ïÎ¶¨Î•º ÌïòÍ≥† cellÏóêÏÑú ÏÑπÏÖòÏùÑ Ï†ïÎ¶¨Ìï† Ïàò ÏûàÏùÑÍπå?
 „Ñ¥ Ïù¥ÎØ∏ÏßÄ urlÏùÑ ÌôúÏö©Ìï¥ÏÑú Îç∞Ïù¥ÌÑ∞ Ìò∏Ï∂úÌïòÍ∏∞ -> Ïù¥Í±¥ Ìà¨ÎëêÏùò ÎîîÌÖåÏùºÏùÑ ÌôïÏù∏Ìï† Îïå Î≥º Ïàò ÏûàÍ≤å ÎßåÎì§Ïñ¥Î≥¥Ïûê!
 „Ñ¥ Î¶¨ÎìúÎØ∏ ÏûëÏÑ±
 „Ñ¥ ÏÑ†ÌÉù Íµ¨ÌòÑ - ÏùºÎã® ÏúÑÏóê ÎÇ¥Ïö©Îì§ Î®ºÏ†Ä!
 */
/// UserdefaultÎ•º ÎåÄÏ≤¥ÌïòÎäî Îç∞Ïù¥ÌÑ∞ Î≤†Ïù¥Ïä§Î•º ÌôúÏö©Ìï¥Î≥¥Í∏∞ or ÌõÑÎ∞úÎåÄ Í∞ïÏùòÏ≤òÎüº ÌÅ¥Î°úÏ†ÄÎ•º ÌôúÏö©Ìï¥Î≥¥Îäî Í≤ÉÏúºÎ°ú

class ViewController: UIViewController {
    
    //MARK: - Outlet Î∞è Ï†ÑÏó≠ Î≥ÄÏàò Ï†ïÎ¶¨
    
    //reference to managed object context!!
    let context = (UIApplication.shared.delegate as! AppDelegate).persistentContainer.viewContext
    var todos: [Todo]?
    var textFieldBottomConstraint: NSLayoutConstraint?
    let data: [String] = [
        "Leisure", "Work", "Personal"
    ]
    var selectedCategory: Categories?
    var todosByCategory: [Categories: [Todo]] = [:]

    
    /// ÏΩîÎìúÎ°ú Íµ¨ÏÑ±Ìïú ÌÖåÏù¥Î∏î Î∑∞ÏôÄ Î≤ÑÌäºÎì§ÏùÑ Ïñ¥ÎñªÍ≤å ÌïòÎ©¥ ÏâΩÍ≤å Íµ¨ÏÑ±Ìï† Ïàò ÏûàÏùÑÍπå?
    /// Or, Ïñ¥ÎñªÍ≤å ÌïòÎ©¥ ÏÉùÏÑ± Îã®Í≥ÑÎ•º ÏâΩÍ≤å Ìï† Ïàò ÏûàÏùÑÍπå -
    let todoTableView = {
        let tableView = UITableView(frame: UIScreen.main.bounds, style: .insetGrouped)
        tableView.register(TodoViewCell.self, forCellReuseIdentifier: "cell")
        tableView.backgroundColor = .black
        return tableView
    }()
    
    let tapBarView: UIView = {
        let view = UIView()
        view.backgroundColor = .black
        view.alpha = 1
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()
    
    lazy var checkFinishedButton: UIButton = {
        let bt = UIButton()
        bt.setImage(UIImage(systemName: "house.circle.fill")?.withTintColor(.white, renderingMode: .alwaysOriginal), for: .normal)
        bt.imageView?.contentMode = .scaleToFill
        bt.backgroundColor = .blue
        bt.layer.cornerRadius = 10
        bt.layer.borderWidth = 1
        bt.clipsToBounds = true
        bt.addTarget(self, action: #selector(checkFinishedTapped), for: .touchUpInside)
        bt.widthAnchor.constraint(equalToConstant: 50).isActive = true
        return bt
    }()
    
    lazy var sendButton: UIButton = {
        let bt = UIButton()
        bt.translatesAutoresizingMaskIntoConstraints = false
//        bt.backgroundColor = .white
        bt.setTitle("Ï†ÑÏÜ°", for: .normal)
        bt.setTitleColor(.black, for: .normal)
        bt.addTarget(self, action: #selector(addTodoTapped), for: .touchUpInside)
        return bt
    }()
    
    lazy var messageTextField: UITextField = {
        let tf = UITextField()
        tf.placeholder = "ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
        tf.backgroundColor = .white
        tf.layer.cornerRadius = 10
        tf.layer.borderWidth = 1
        tf.layer.borderColor = UIColor.red.cgColor
        tf.layer.masksToBounds = true
        tf.heightAnchor.constraint(equalToConstant: 35).isActive = true
        tf.delegate = self
        tf.addTarget(self, action: #selector(textFieldDidBeginEditing(_:)), for: .editingDidBegin)
        tf.autocorrectionType = .no
        return tf
    }()
    
    // Ïù¥ ÏπúÍµ¨Î•º ÏÉùÏÑ±ÌïòÎäî Ïù¥Ïú†Îäî?
    private let flowLayout: UICollectionViewFlowLayout = {
        let layout = UICollectionViewFlowLayout()
        layout.scrollDirection = .horizontal
        layout.minimumInteritemSpacing = 8
        layout.estimatedItemSize = CGSize(width: 10, height: 10)
        return layout
    }()
    
    private lazy var categoryCollection: UICollectionView = {
        let view = UICollectionView(frame: .zero, collectionViewLayout: self.flowLayout)
        view.dataSource = self
        view.delegate = self
        view.isScrollEnabled = true
        view.showsHorizontalScrollIndicator = true
        view.showsVerticalScrollIndicator = true
        view.backgroundColor = .red
        view.clipsToBounds = true
        view.contentInset = .zero
        view.contentInset = UIEdgeInsets(top: 20, left: 20, bottom: 20, right: 20)
        view.register(SectionViewCell.self, forCellWithReuseIdentifier: "SectionViewCell")
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()
        
    /// ÏΩîÎìú Ï†ïÎ¶¨ÌïòÍ∏∞
    override func viewDidLoad() {
        super.viewDidLoad()
        view.backgroundColor = .white
                
        todoTableView.dataSource = self
        todoTableView.delegate = self

        view.addSubview(todoTableView)
        todoTableView.frame = view.bounds
        
        view.addSubview(categoryCollection)
        
        /// Ïù¥ ÏπúÍµ¨Î•º Ïñ¥ÎîîÎ°ú Ïñ¥ÎñªÍ≤å Î∞∞ÏπòÎ•º Ìï¥ÏïºÌï†Íπå?
        let stack = UIStackView(arrangedSubviews: [checkFinishedButton, messageTextField])
        
        stack.axis = .horizontal
        stack.spacing = 5
        stack.distribution = .fillProportionally
        
        view.addSubview(categoryCollection)
        view.addSubview(tapBarView)
        tapBarView.addSubview(stack)
        tapBarView.addSubview(sendButton)
        
        /// Ïù¥Í±∏ ÎÅÑÎãàÍπå ÏóêÎü¨Í∞Ä ÏóÜÏñ¥Ï°åÎã§. ÏôúÏßÄ??
//        tapBarView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor).isActive = true
        tapBarView.leadingAnchor.constraint(equalTo: view.leadingAnchor).isActive = true
        tapBarView.trailingAnchor.constraint(equalTo: view.trailingAnchor).isActive = true
        tapBarView.heightAnchor.constraint(equalToConstant: 80).isActive = true
        tapBarView.bottomAnchor.constraint(equalTo: stack.bottomAnchor, constant: 30).isActive = true
        
        stack.translatesAutoresizingMaskIntoConstraints = false
        stack.centerXAnchor.constraint(equalTo: tapBarView.centerXAnchor, constant: 0).isActive = true
        stack.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor, constant: 15).isActive = true
        stack.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor, constant: -15).isActive = true
        
        categoryCollection.bottomAnchor.constraint(equalTo: tapBarView.topAnchor, constant: 0).isActive = true
        categoryCollection.leadingAnchor.constraint(equalTo: view.leadingAnchor).isActive = true
        categoryCollection.trailingAnchor.constraint(equalTo: view.trailingAnchor).isActive = true
        categoryCollection.heightAnchor.constraint(equalToConstant: 50).isActive = true
        
        textFieldBottomConstraint = tapBarView.bottomAnchor.constraint(equalTo: view.bottomAnchor, constant: 0)
        textFieldBottomConstraint?.isActive = true
        
        sendButton.trailingAnchor.constraint(equalTo: messageTextField.trailingAnchor, constant: -10).isActive = true
        sendButton.topAnchor.constraint(equalTo: messageTextField.topAnchor).isActive = true
        sendButton.bottomAnchor.constraint(equalTo: messageTextField.bottomAnchor).isActive = true
        
        sendButton.isHidden = true
        
        // Îç∞Ïù¥ÌÑ∞Í∞Ä Ï†ÄÏû•Ïù¥ ÎêòÏóàÎã§. > Ïù¥Ï†ÑÏóêÎäî Ïôú Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÎçò Í±∞ÏßÄ? (NSArray0 objectAtIndex:]: index 0 beyond bounds for empty NSArray)
        fetchData()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillShow), name: UIResponder.keyboardWillShowNotification, object: nil)
        
        NotificationCenter.default.addObserver(self, selector: #selector(self.keyboardWillHide), name: UIResponder.keyboardWillHideNotification, object: nil)
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        NotificationCenter.default.removeObserver(self)
    }
    
//    override func viewDidLayoutSubviews() {
//        super.viewDidLayoutSubviews()
//        view.addSubview(categoryCollection)
//    }
    
    //MARK: - ÏóêÎü¨ ÎåÄÏ≤ò
    private func displayErrors(for errorType: Errors) {
        let alert: UIAlertController
        
        switch errorType {
        case .blankTextField:
            alert = UIAlertController(title: "ÎÇ¥Ïö©Ïù¥ ÎπÑÏñ¥ÏûàÏñ¥Ïöî!",
                                      message: "Ìà¨Îëê ÏûëÏÑ±ÏùÑ ÏûäÏúºÏã†Í±∞ ÏïÑÎãàÏã§ÍπåÏöî?",
                                      preferredStyle: .alert)
        case .tooMuchTodos:
            alert = UIAlertController(title: "10Í∞ú Ïù¥ÏÉÅÏùÄ ÏßëÏ§ëÌïòÍ∏∞ ÌûòÎì§ÏßÄ ÏïäÏùÑÍπåÏöî?",
                                      message: "Îß® ÏúÑ Î™©Ìëú Î®ºÏ†Ä ÎßàÎ¨¥Î¶¨Ìï¥ Ï£ºÏÑ∏Ïöî",
                                      preferredStyle: .alert)
        }
        
        let dismissAction = UIAlertAction(title: "ÌôïÏù∏", style: .default, handler: nil)
        alert.addAction(dismissAction)
        present(alert, animated: true)
    }
    
    private func addTodo() {
        guard let text = messageTextField.text, !text.isEmpty else { return }
        
        let newTodo = Todo(context: self.context)
        newTodo.title = text
        newTodo.id = 0
        newTodo.isCompleted = true
        newTodo.section = "leisure"
        
        do {
            try self.context.save()
            self.fetchData()
        } catch {
            
        }
    }
    
    //MARK: - TodoÏóê Î∞òÏùëÌïòÎäî Î≤ÑÌäº Ï°∞Ï†à Î©îÏÑúÎìú -> Í≤∞Íµ≠ Ï†ÅÏö© Ïã§Ìå®!
    
    @objc func textFieldDidBeginEditing(_ textField: UITextField) {
        sendButton.isHidden = false
    }
    
    @objc func keyboardWillShow(_ notification: NSNotification) {
        if messageTextField.isEditing {
            updateViewWithKeyboard(notification: notification, viewBottomConstraint: self.textFieldBottomConstraint!, keyboardWillShow: true)
        }
    }
    
    @objc func keyboardWillHide(_ notification: NSNotification) {
        updateViewWithKeyboard(notification: notification, viewBottomConstraint: self.textFieldBottomConstraint!, keyboardWillShow: false)
    }
    
    func updateViewWithKeyboard(notification: NSNotification, viewBottomConstraint: NSLayoutConstraint, keyboardWillShow: Bool) {
        guard let userInfo = notification.userInfo,
              let keyboardSize = userInfo[UIResponder.keyboardFrameEndUserInfoKey] as? NSValue else { return }
        guard let keyboardDuration = userInfo[UIResponder.keyboardAnimationDurationUserInfoKey] as? Double else { return }
        guard let keyboardCurve = UIView.AnimationCurve(rawValue: userInfo[UIResponder.keyboardAnimationCurveUserInfoKey] as! Int) else { return }
        
        let keyboardHeight = keyboardSize.cgRectValue.height
        
        if keyboardWillShow { viewBottomConstraint.constant = -(keyboardHeight) }
        else { viewBottomConstraint.constant = 0 }
        
        let animator = UIViewPropertyAnimator(duration: keyboardDuration, curve: keyboardCurve) { [weak self] in
            self?.view.layoutIfNeeded()
        }
        animator.startAnimation()
    }
    
    
    //MARK: - IBAction
    
    @objc func checkFinishedTapped(_ sender: UIButton) {
        // Ïù¥Í≤å Í¥úÏ∞ÆÏùÄÏßÄ ÌôïÏù∏Ìï¥Î≥¥Ïûê!
        sender.animateButton(sender)
        let destination = FinishedController()
        destination.modalPresentationStyle = .fullScreen
        self.present(destination, animated: true)
    }
    
    
    @objc func addTodoTapped(_ sender: UIButton) {
        sender.animateButton(sender)
        addTodo()
    }
    
    // CoreDataÏóê ÏûàÎäî Í∞íÏùÑ Ìò∏Ï∂úÌïòÎäî Î∞©Î≤ï
    func fetchData() {
        // fetching data from CoreData to display
        do {
            
            // TodoManagerÏóê ÏûàÎäî Îç∞Ïù¥ÌÑ∞Î•º Í∞ÄÏ†∏Ïò¨ Ïàò ÏûàÎèÑÎ°ù ÎÖ∏Î†•Ìï¥Î≥¥Îùº!
            // ÏßÄÍ∏àÏùÄ core data ÏÜçÏóê ÏûàÎäî Í∞íÎì§ÏùÑ Îã§ Í∞ÄÏßÄÍ≥† ÏôÄÏÑú listÎ°ú ÎÑ£ÎèÑÎ°ù Íµ¨ÏÑ±
            
            // filterÎ•º Ï†ÅÏö©ÌïòÎäî Î∞©Î≤ï
            //            let filteredRequest = Todo.fetchRequest() as NSFetchRequest<Todo>
            //            let filter = NSPredicate(format: "title contains 'Ïù¥Î†áÍ≤å'")
            //            filteredRequest.predicate = filter
            // filteredRequestÎ•º ÌñàÏùÑ Îïå Ï†ÅÏö©Ïù¥ ÎêòÎäî Ïù¥Ïú†Îäî Todo ÌÉÄÏûÖÏúºÎ°ú Î≥ÄÌôòÏù¥ ÎêòÏñ¥ ÏûàÍ∏∞ ÎïåÎ¨∏Ïù¥Îã§.
            self.todos = try context.fetch(Todo.fetchRequest()) //Todo.fetchRequest()
            
            // mainÏóêÏÑú Ìò∏Ï∂úÌï† Ïàò ÏûàÎèÑÎ°ù threadÎ•º ÏßÄÏ†ïÌïòÍ≤å ÎêúÎã§.
            DispatchQueue.main.async {
                // UI Ïó≠Ìï†Ïù¥Í∏∞ ÎïåÎ¨∏Ïóê main Ïì∞Î†àÎìúÏóêÏÑú ÏßÑÌñâÌïòÎèÑÎ°ù ÌïòÎäî Í≤É -> MainÏù¥ ÏïÑÎãàÎ©¥ ÏóêÎü¨Í∞Ä Î∞úÏÉù?‚≠êÔ∏è
                self.todoTableView.reloadData()
            }
        }
        catch {
            
        }
    }
}

//MARK: - UITableViewDataSource

extension ViewController: UITableViewDataSource {
    
    // Ïπ¥ÌÖåÍ≥†Î¶¨ Íµ¨Î∂Ñ
    func numberOfSections(in tableView: UITableView) -> Int {
        return Categories.allCases.count
//        return todosByCategory[selectedCategory!]?.count ?? 0
    }
    
    // Í∞Å sectionÎ≥ÑÎ°ú Ï±ÑÏõåÏßà Îç∞Ïù¥ÌÑ∞ Ïàò
    // Check if the section matches the selected category, and return the number of todos accordingly
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        if Categories.allCases[section] == selectedCategory {
            return todos?.count ?? 0
        } else {
            return 0
        }
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "cell", for: indexPath) as! TodoViewCell
        let todo = self.todos?[indexPath.row]
        cell.titleLabel.text = todo?.title
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        // Ìà¨ÎëêÎ•º ÏßÄÏ†ïÌïòÍ≥†
        let todo = self.todos![indexPath.row]
        // alert Ï∞ΩÏùÑ ÎßåÎì§Ïñ¥ÏÑú
        let alert = UIAlertController(title: "Ìà¨Îëê ÏàòÏ†ï", message: "ÎÇ¥Ïö© ÏàòÏ†ï", preferredStyle: .alert)
        alert.addTextField()
        
        // Ìï¥Îãπ alertÏùò textFieldÏóê Ï†ëÍ∑ºÌïòÍ≥†
        let textField = alert.textFields![0]
        textField.text = todo.title
        
        // alertÏóê Î≤ÑÌäºÏùÑ Ï∂îÍ∞Ä
        let saveButton = UIAlertAction(title: "Ï†ÄÏû•", style: .default) { _ in
            let textfield = alert.textFields![0]
            todo.title = textfield.text
            do {
                try self.context.save()
            }
            catch {
            }
            self.fetchData()
        }
        alert.addAction(saveButton)
        present(alert, animated: true)
    }
    
    // Ïπ¥ÌÖåÍ≥†Î¶¨ Íµ¨Î∂Ñ ÌÉÄÏù¥ÌãÄ
    func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -> String? {
        // ‚≠êÔ∏èreach into the sction of category >> ÏÑπÏÖò ÌÉÄÏù¥ÌãÄÏùÑ ÏÉàÎ°ú ÏÉùÏÑ±Ìï† ÎïåÎßàÎã§ Î≥ÄÍ≤ΩÌï† Ïàò ÏûàÎÇò? -> Í∑∏Îü¨Î©¥ Î©îÏãúÏßÄ ÏûÖÎ†•ÎûÄÏùÑ Ïπ¥ÌÖåÍ≥†Î¶¨ ÏòÅÏó≠ ÌïòÎÇò ÎßåÎì§Ïñ¥ÏïºÍ≤†Îã§!
        // Categories ÌÉÄÏûÖÏù¥ Ï†ïÌôïÌïòÍ≤å Î≠îÏßÄ Î™∞ÎûêÍ∏∞Ïóê rawValueÎ•º Ï†ëÍ∑ºÌï† Ïàò ÏóÜÏóàÎã§. StringÏúºÎ°ú ÏßÄÏ†ïÌïòÍ≤å ÎêòÎ©¥ÏÑú ÌÉÄÏûÖÏùÑ Í∞ÄÏßà Ïàò ÏûàÏóàÎçò Í≤É!
        return Categories.allCases[section].rawValue
    }
}

//MARK: - UITableViewDelegate
extension ViewController: UITableViewDelegate {
    
    // ÏÇ≠Ï†ú Í∏∞Îä•ÏùÑ Íµ¨ÌòÑÌï¥ÎëêÍ∏∞Îäî ÌñàÎÑ§... Ìù†...
    func tableView(_ tableView: UITableView, trailingSwipeActionsConfigurationForRowAt indexPath: IndexPath) -> UISwipeActionsConfiguration? {
        let delete = UIContextualAction(style: .destructive, title: "ÏÇ≠Ï†úÌïòÍ∏∞") { (action, view, completionHandler) in
            // ÎÇ¥Í∞Ä ÏßÄÏö∞Í≥† Ïã∂ÏùÄ todoÎ•º ÏßÄÏ†ïÌïòÍ≥†
            let remove = self.todos?[indexPath.row]
            
            // ÏßÄÏ†ïÎêú todoÎ•º ÏßÄÏö∏ Ïàò ÏûàÎèÑÎ°ù Í±∞Ï≥êÍ∞ÄÏïºÌïúÎã§.
            if let remove = remove {
                self.context.delete(remove)
            }
            do {
                try self.context.save()
            }
            catch {
                // ÏóêÎü¨Ï≤òÎ¶¨ Ìï¥Î≥¥Ïûê!
            }
            self.fetchData()
        }
        
        let save = UIContextualAction(style: .normal, title: "Ï†ÄÏû•") { (action, view, completionHandler) in
            let saved = self.todos?[indexPath.row]
            
            if let saved = saved {
                self.context.delete(saved)
            }
            do {
                try self.context.save()
            }
            catch {
                // ÏóêÎü¨Ï≤òÎ¶¨ Ìï¥Î≥¥Ïûê!
            }
            self.fetchData()
        }
        return UISwipeActionsConfiguration(actions: [delete, save])
    }
}

extension ViewController: UITextFieldDelegate {
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        messageTextField.resignFirstResponder()
    }
}

extension ViewController: UICollectionViewDelegate {
    
}

extension ViewController: UICollectionViewDataSource {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return Categories.allCases.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "SectionViewCell", for: indexPath) as! SectionViewCell
        let category = Categories.allCases[indexPath.item]
        cell.titleLabel.text = category.rawValue
//        cell.backgroundColor = .white
        // Ïù¥Í±¥ Ïôú Ï†ÅÏö©ÌïòÎäîÍ±∏Íπå?
        cell.isSelected = (category == selectedCategory)
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        selectedCategory = Categories.allCases[indexPath.item]
        // Ïôú Ï†úÏô∏ÌïòÎãàÍπå ÏÇ¨Ïù¥Ï¶à Ï°∞Ï†àÏù¥ ÏóÜÏñ¥ÏßÄÏßÄ?
        // collectionView.reloadData()
    }
}

extension ViewController: UICollectionViewDelegateFlowLayout {
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        return CGSize(width: view.frame.width - 80, height: view.frame.height)
    }
}

// MARK: - Findings
/*
 // ÏÉàÎ°ú ÏÉùÏÑ±ÏùÑ ÌïúÎã§Í≥†...? Ïù¥Í≤å ÎßûÏùÑÍπå?
 //        for viewController in navigationController?.viewControllers ?? [] {
 //            if viewController is FinishedController {
 //                navigationController?.popToViewController(viewController, animated: true)
 //            }
 //        }
 */
