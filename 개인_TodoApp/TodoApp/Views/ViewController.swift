//
//  ViewController.swift
//  TodoApp
//
//  Created by Jack Lee on 2023/08/02.
//

import UIKit

//MARK: - ÏöîÏ≤≠ÏÇ¨Ìï≠ Ï†ïÎ¶¨
/*
 ÌïÑÏàò Íµ¨ÌòÑ
 „Ñ¥ userdefaultÎ°ú Îç∞Ïù¥ÌÑ∞ Ïú†ÏßÄ - CRUD (ÏßÄÍ∏àÏùÄ Î¨¥ÏóáÏù¥ Í∞ÄÎä•ÌïúÍ∞Ä? > üî•create, üî•read, update, üî•delete > Ï†úÎåÄÎ°ú ÎêòÎäîÍ±¥ create, readÏù∏Í±∞ Í∞ôÏùÄÎç∞?
 „Ñ¥ ‚≠êÔ∏è tableView section/ header / footerÎ°ú Íµ¨Î∂Ñ - Ïπ¥ÌÖåÍ≥†Î¶¨Î≥ÑÎ°ú Íµ¨Î∂Ñ ÏßìÍ∏∞ >> inset groupÏúºÎ°ú Ï†ïÎ¶¨Î•º ÌïòÍ≥† cellÏóêÏÑú ÏÑπÏÖòÏùÑ Ï†ïÎ¶¨Ìï† Ïàò ÏûàÏùÑÍπå?
 „Ñ¥ Ïù¥ÎØ∏ÏßÄ urlÏùÑ ÌôúÏö©Ìï¥ÏÑú Îç∞Ïù¥ÌÑ∞ Ìò∏Ï∂úÌïòÍ∏∞ -> Ïù¥Í±¥ Ìà¨ÎëêÏùò ÎîîÌÖåÏùºÏùÑ ÌôïÏù∏Ìï† Îïå Î≥º Ïàò ÏûàÍ≤å ÎßåÎì§Ïñ¥Î≥¥Ïûê!
 „Ñ¥ Î¶¨ÎìúÎØ∏ ÏûëÏÑ±
 „Ñ¥ ÏÑ†ÌÉù Íµ¨ÌòÑ - ÏùºÎã® ÏúÑÏóê ÎÇ¥Ïö©Îì§ Î®ºÏ†Ä!
 */

/*
 Ïò§Îäò ÏΩîÎìúÎ°ú Î¨¥ÏóáÏùÑ Î∞îÍøÄ Í≤ÉÏù∏Í∞Ä?
 1. Fully implment programmatic code
 2. draw UI similiar to my previous design
 */
 

class ViewController: UIViewController {

//MARK: - Outlet Î∞è Ï†ÑÏó≠ Î≥ÄÏàò Ï†ïÎ¶¨
    
    /// ÏΩîÎìúÎ°ú Íµ¨ÏÑ±Ìïú ÌÖåÏù¥Î∏î Î∑∞ÏôÄ Î≤ÑÌäºÎì§ÏùÑ Ïñ¥ÎñªÍ≤å ÌïòÎ©¥ ÏâΩÍ≤å Íµ¨ÏÑ±Ìï† Ïàò ÏûàÏùÑÍπå?
    /// Or, Ïñ¥ÎñªÍ≤å ÌïòÎ©¥ ÏÉùÏÑ± Îã®Í≥ÑÎ•º ÏâΩÍ≤å Ìï† Ïàò ÏûàÏùÑÍπå -
    let todoTableView = {
        let tableView = UITableView(frame: UIScreen.main.bounds, style: .insetGrouped)
        tableView.register(TodoViewCell.self, forCellReuseIdentifier: "cell")
        tableView.backgroundColor = .red
        return tableView
    }()
    
    let checkFinishedButton = {
        let bt = UIButton()
        bt.frame = CGRect(x: 0, y: 0, width: 50, height: 50)
        bt.titleLabel?.text = ""
        bt.setTitle("ÏôÑÎ£åÌïú Ïùº ÌôïÏù∏ÌïòÍ∏∞", for: .normal)
        bt.backgroundColor = .blue
        bt.setTitleColor(.black, for: .normal)
        bt.layer.cornerRadius = 15
        bt.layer.borderWidth = 1
        bt.clipsToBounds = true
        bt.addTarget(self, action: #selector(checkFinishedTapped), for: .touchUpInside)
        return bt
    }()
        
    let addTodoButton = {
        let bt = UIButton()
        bt.frame = CGRect(x: 0, y: 0, width: 50, height: 50)
        bt.titleLabel?.text = ""
        bt.setTitle("Ìï†Ïùº Ï∂îÍ∞ÄÌïòÍ∏∞", for: .normal)
        bt.backgroundColor = .yellow
        bt.setTitleColor(.white, for: .normal)
        bt.layer.cornerRadius = 15
        bt.layer.borderWidth = 1
        bt.clipsToBounds = true
        bt.addTarget(self, action: #selector(addTodoTapped), for: .touchUpInside)
        return bt
    }()
    
    /// ÏΩîÎìú Ï†ïÎ¶¨ÌïòÍ∏∞
    override func viewDidLoad() {
        super.viewDidLoad()
        
        todoTableView.dataSource = self
        todoTableView.delegate = self
        
        view.addSubview(todoTableView)
        
        /// Ïù¥ ÏπúÍµ¨Î•º Ïñ¥ÎîîÎ°ú Ïñ¥ÎñªÍ≤å Î∞∞ÏπòÎ•º Ìï¥ÏïºÌï†Íπå?
        let stack = UIStackView(arrangedSubviews: [checkFinishedButton, addTodoButton])
        stack.axis = .horizontal
        stack.spacing = 5
        stack.distribution = .fillEqually
        view.addSubview(stack)
        stack.translatesAutoresizingMaskIntoConstraints = false
        stack.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor, constant: -15).isActive = true
        stack.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor, constant: 15).isActive = true
        stack.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor, constant: -15).isActive = true
        
        todoTableView.frame = view.bounds
        
        // Userdefault Îç∞Ïù¥ÌÑ∞ Ìò∏Ï∂ú
        /// UserdefaultÎ•º ÎåÄÏ≤¥ÌïòÎäî Îç∞Ïù¥ÌÑ∞ Î≤†Ïù¥Ïä§Î•º ÌôúÏö©Ìï¥Î≥¥Í∏∞ or ÌõÑÎ∞úÎåÄ Í∞ïÏùòÏ≤òÎüº ÌÅ¥Î°úÏ†ÄÎ•º ÌôúÏö©Ìï¥Î≥¥Îäî Í≤ÉÏúºÎ°ú
        TodoManager.shared.loadTodos()
        print(TodoManager.list)
    }
    
//MARK: - UIComponent Íµ¨ÏÑ± Î©îÏÑúÎìú
    
    // Î≤ÑÌäº bounceBack Ìö®Í≥º
    fileprivate func animateButton(_ viewToAnimate: UIView) {
        UIView.animate(withDuration: 0.15, delay: 0, usingSpringWithDamping: 0.6, initialSpringVelocity: 0, options: .curveEaseIn, animations: { viewToAnimate.transform = CGAffineTransform(scaleX: 0.95, y: 0.95)
        }) { (_) in
            UIView.animate(withDuration: 0.15, delay: 0, usingSpringWithDamping: 0.4, initialSpringVelocity: 2, options: .curveEaseIn, animations: { viewToAnimate.transform = CGAffineTransform(scaleX: 1, y: 1) }
                           , completion: nil)
        }
    }
    
    
    //MARK: - ÏóêÎü¨ ÎåÄÏ≤ò
    private func displayErrors(for errorType: Errors) {
        let alert: UIAlertController
        
        switch errorType {
        case .blankTextField:
            alert = UIAlertController(title: "ÎÇ¥Ïö©Ïù¥ ÎπÑÏñ¥ÏûàÏñ¥Ïöî!",
                                      message: "Ìà¨Îëê ÏûëÏÑ±ÏùÑ ÏûäÏúºÏã†Í±∞ ÏïÑÎãàÏã§ÍπåÏöî?",
                                      preferredStyle: .alert)
        case .tooMuchTodos:
            alert = UIAlertController(title: "10Í∞ú Ïù¥ÏÉÅÏùÄ ÏßëÏ§ëÌïòÍ∏∞ ÌûòÎì§ÏßÄ ÏïäÏùÑÍπåÏöî?",
                                      message: "Îß® ÏúÑ Î™©Ìëú Î®ºÏ†Ä ÎßàÎ¨¥Î¶¨Ìï¥ Ï£ºÏÑ∏Ïöî",
                                      preferredStyle: .alert)
        }
        
        let dismissAction = UIAlertAction(title: "ÌôïÏù∏", style: .default, handler: nil)
        alert.addAction(dismissAction)
        present(alert, animated: true)
    }
    
    private func addTodo() {
        let alert = UIAlertController(title: "Ïò§ÎäòÏùò Todo",
                                      message: "Î¨¥ÏóáÏùÑ ÌïòÍ≥† Ïã∂ÏúºÏÑ∏Ïöî?",
                                      preferredStyle: .alert)
        
        if TodoManager.list.count >= 10 {
            displayErrors(for: .tooMuchTodos)
            return
        }
        
        alert.addTextField{ (textField) in
            textField.placeholder = "ÎßàÏùåÍªè ÏûëÏÑ±ÌïòÏÑ∏Ïöî!"
        }
        
        let saveTodo = UIAlertAction(title: "Ï†ÄÏû•ÌïòÍ∏∞", style: .default) { [weak self] action in
            guard let self = self else { return }
           
            if let title = alert.textFields?.first?.text, !title.isEmpty {
                let newTodo = Todo(id: (TodoManager.list.last?.id ?? -1) + 1, title: title, isCompleted: false, timeStamp: .now)
                TodoManager.list.append(newTodo)
                self.todoTableView.insertRows(at: [IndexPath(row: TodoManager.list.count - 1, section: 0)], with: .automatic)
                
                // UserdefaultÏóê Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•
                TodoManager.shared.saveTodos()
            } else {
                displayErrors(for: .blankTextField)
            }
        }
        
        let cancel = UIAlertAction(title: "Îí§Î°ú ÎèåÏïÑÍ∞ÄÍ∏∞", style: .cancel, handler: nil)
        alert.addAction(saveTodo)
        alert.addAction(cancel)
        present(alert, animated: true)
    }
    
    //MARK: - TodoÏóê Î∞òÏùëÌïòÎäî Î≤ÑÌäº Ï°∞Ï†à Î©îÏÑúÎìú -> Í≤∞Íµ≠ Ï†ÅÏö© Ïã§Ìå®!
    
//    fileprivate func updateButton() {
//        let numberOfTodos = min(TodoManager.list.count, 10)
//        let ratio = CGFloat(numberOfTodos) / 10.0
//
//        let newButtonWidth = ratio * checkFinished.frame.size.width
//        let newButton2Width = (1.0 - ratio) * addTodoButton.frame.size.width
//
//        buttonAWidth = newButtonWidth
//        buttonBWidth = newButton2Width
//
//        UIView.animate(withDuration: 0.3) {
//            self.addTodoButton.frame.size.width = self.buttonAWidth
//            self.checkFinished.frame.size.width = self.buttonBWidth
//        }
//    }
    
    //MARK: - IBAction
    
    @objc func checkFinishedTapped(_ sender: UIButton) {
        animateButton(sender)
        let destination = FinishedController()
        destination.modalPresentationStyle = .fullScreen
        self.present(destination, animated: true)
    }
    
    
    @objc func addTodoTapped(_ sender: UIButton) {
        self.animateButton(sender)
        addTodo()
    }
}

//MARK: - UITableViewDataSource

extension ViewController: UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return TodoManager.list.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "cell", for: indexPath) as! TodoViewCell
        cell.setTodo(TodoManager.list[indexPath.row])
        return cell
    }
    
    func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCell.EditingStyle, forRowAt indexPath: IndexPath) {
        if editingStyle == .delete {
            TodoManager.list.remove(at: indexPath.row)
            tableView.deleteRows(at: [indexPath], with: .automatic)
            
            // UserdefaultÏóê Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•
            TodoManager.shared.saveTodos()
        }
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
    }
    
    func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -> String? {
        return "Ïù¥Î¶ÑÏù¥ Î≥ÄÍ≤ΩÎêòÎäîÍ∞ÄÏöî? \(section)"
    }
}

//MARK: - UITableViewDelegate
extension ViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, leadingSwipeActionsConfigurationForRowAt indexPath: IndexPath) -> UISwipeActionsConfiguration? {
        
        let complete = UIContextualAction(style: .normal, title: "ÏôÑÎ£å") { [weak self] action, view, complete in
            guard let self = self else { return }
            
            // TodoÏóê ÏôÑÎ£å Ïó¨Î∂Ä(strikeThrough) ÌôïÏù∏ Î∞è Ï≤òÎ¶¨
            var todo = TodoManager.list[indexPath.row]
            todo.isCompleted.toggle()
            TodoManager.list[indexPath.row] = todo
            
            if let cell = tableView.cellForRow(at: indexPath) as? TodoViewCell {
                if todo.isCompleted {
                    cell.textLabel?.attributedText = todo.title.strikeThrough()
                    TodoManager.completeTodo(todo: todo, isCompleted: true)
                } else {
                    cell.textLabel?.attributedText = nil
                    cell.textLabel?.text = todo.title
                    TodoManager.completeTodo(todo: todo, isCompleted: false)
                }
            }
      
            if todo.isCompleted {
                TodoManager.list.remove(at: indexPath.row)
                tableView.deleteRows(at: [indexPath], with: .automatic)
            }
            complete(true)
            TodoManager.storeCompleted(todo: todo)
        }
        let actions = UISwipeActionsConfiguration(actions: [complete])
        actions.performsFirstActionWithFullSwipe = false
        return actions
    }
}


// MARK: - Findings
/*
 // ÏÉàÎ°ú ÏÉùÏÑ±ÏùÑ ÌïúÎã§Í≥†...? Ïù¥Í≤å ÎßûÏùÑÍπå?
//        for viewController in navigationController?.viewControllers ?? [] {
//            if viewController is FinishedController {
//                navigationController?.popToViewController(viewController, animated: true)
//            }
//        }
 */
